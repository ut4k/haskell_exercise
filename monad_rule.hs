-- モナド則

-- 左恒等性 : returnをつかってデフォルトの文脈に入れたものを >>=
-- をつかって関数に食わせた結果は、
-- 単にその関数を適用した結果と同じであるというルール

-- Maybeモナド
fn1 = return 3 >>= (\x -> Just (x + 100000))
fn1' = (\x -> Just (x + 100000)) 3

-- リストモナド
fn2 = return "WoM" >>= (\x -> [x,x,x])
fn2' = (\x -> [x,x,x]) "WoM"

-- IOモナドも。

-- 右恒等性 :
-- >>=を使ってモナド値をreturnに食わせた結果は、もとのモナド値を不変であるというルール

--Maybe
fn3 = Just "move on up" >>= return
--リスト
fn4 = [1,2,3,4] >>= return
--IO
fn5 = putStrLn "Wah!" >>= return

-- 結合法則
-- >>
-- を使ったモナド関数適用の連鎖があるときに、どの順序で評価しても結果は同じであるべきというルール

(.) :: (b -> c ) -> (a -> b) -> (a -> c)
f . g = (\x -> f(g x))

(<=<) :: (Monad m) => (b -> m c) -> (a -> m b) -> (a -> m c)
f <=< g = (\x -> g x >>= f)

